@page "/login"

@using System.Security.Cryptography;
@using System.Text;
@using Data.models;


@* // Для вызова JavaScript *@
@inject IJSRuntime JSRuntime
@* // Для работы с пользователями в БД *@
@inject Data.UserManager UserManager
@* // Для сохранения состояния пользователя *@
@inject BlazorApp1.Services.UserStateService UserStateService
@* // Для перенаправления на другие страницы *@
@inject NavigationManager NavigationManager
@* // Для чтения настроек (например, токена) *@
@inject IConfiguration Configuration

@* // метод для отрисовки кнопки для входа через тг *@

<h3>Вход в систему</h3>
<p>Пожалуйста, войдите, используя ваш аккаунт Telegram.</p>

@* встраиваем кнопку для тг *@
<div id="telegram-login-widget"></div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@code
{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // если первый раз запускаем
        if (firstRender)
        {
            var reference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("telegramLogin.renderWidget", 
                "telegram-login-widget", reference);
        }
    }
}

@code
{
    private string? errorMessage;

    [JSInvokable]
    public async Task ProcessTelegramAuth(TelegramUser user)
    {
        errorMessage = null;
        try
        {
            if (!IsTelegramDataValid(user))
            {
                errorMessage = "Ошибка проверки данных. Пожалуйста, попробуйте войти снова";
                StateHasChanged(); // чтобы показать страницу с ошибкой
                return;
            }

            var appUser = await UserManager.FindOrCreateUserAsync(user.id, user.first_name, user.username);
            UserStateService.SetUser(appUser);
            NavigationManager.NavigateTo("/"); // перенаправляем на главную страницу
        }
        catch (Exception e)
        {
            Console.WriteLine(e); 
            errorMessage = "Произошла непредвиденная ошибка на сервере. Попробуйте позже.";
            StateHasChanged();
        }
    }

    private bool IsTelegramDataValid(TelegramUser user)
    {
        var botToken = Configuration["TelegramBotToken"];
        if (string.IsNullOrEmpty(botToken))
            throw new InvalidOperationException("Bot not founded!");

        var userData = new List<string>();
        var allProperties = user.GetType().GetProperties();
        foreach (var property in allProperties)
        {
            if (property.Name == "hash") continue;
            var value = property.GetValue(user);
            if (value != null)
                userData.Add($"{property.Name}={value}");
        }

        userData.Sort();
        var userDataString = string.Join("\n", userData);

        using var sha256 = SHA256.Create();
        var tokenBytes = Encoding.UTF8.GetBytes(botToken);
        var secretKey = SHA256.HashData(tokenBytes);
        using var hmac = new HMACSHA256(secretKey);
        var computedHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(userDataString));
        var computedHashString = BitConverter.ToString(computedHash).Replace("-", "").ToLower();

        return user.hash == computedHashString;
    }
}
